from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from utils.database import (
    insert_into_users, 
    select_from_users,
    get_expense_count_by_telegram_id,
    get_expense_sum_by_telegram_id
)

router = Router()

@router.message(Command("start"))
async def command_start_handler(message: Message) -> None:

    user = {
        "telegram_id": message.from_user.id,
        "first_name": message.from_user.first_name or "Unknown",
        "last_name": message.from_user.last_name or "Unknown",
        "username": message.from_user.username or "Unknown"
    }

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω—ñ–≤", switch_inline_query_current_chat="–ü–æ–∫–∞–∂–∏ –º–æ—é –∞–Ω–∞–ª—ñ—Ç–∏–∫—É –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤.")]
    ])

    if user["telegram_id"] in [user["telegram_id"] for user in select_from_users()]:

        expense_count = get_expense_count_by_telegram_id(user["telegram_id"])
        expense_sum = get_expense_sum_by_telegram_id(user["telegram_id"])
        
        formatted_sum = f"{expense_sum:_.2f}".replace('_', ' ')

        await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, <b>{user["first_name"]}</b>! üëã\n\n"
                             f"–Ø —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –ø–æ–º—ñ—á–Ω–∏–∫, –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏. ü§ñ\n\n"
                             f"üìä –ù–∞—Ä–∞–∑—ñ —Ç–∏ –∑–∞—Ñ—ñ–∫—Å—É–≤–∞–≤ <b>{expense_count}</b> –ø–æ–∑–∏—Ü—ñ–π\n"
                             f"üí∞ –ù–∞ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É <b>{formatted_sum}</b> –≥—Ä–Ω.\n\n"
                             f"–ì–æ—Ç–æ–≤–∏–π —Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ —Ç–≤–æ—ó –Ω–æ–≤—ñ –≤–∏—Ç—Ä–∞—Ç–∏!",
                             reply_markup=keyboard,
                             parse_mode="HTML")
    
    else:

        insert_into_users(user)

        await message.answer("–ü—Ä–∏–≤—ñ—Ç!\b–Ø –±–æ—Ç —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î —Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ —Ç–≤–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏ —Ç–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ —ó—Ö –∞–Ω–∞–ª—ñ—Ç–∏–∫—É.", reply_markup=keyboard)

@router.message(F.text.lower() == "–ø–æ–∫–∞–∂–∏ –º–æ—é –∞–Ω–∞–ª—ñ—Ç–∏–∫—É –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤.")
async def text_show_30_day_analytics_handler(message: Message) -> None:
    await message.answer("–ù–µ–∑–∞–±–∞—Ä–æ–º —Ç—É—Ç –±—É–¥–µ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–≤–æ—ó—Ö –≤–∏—Ç—Ä–∞—Ç –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤.")

@router.message(Command("last_30_days_analytics"))
async def command_last_30_days_analytics_handler(message: Message) -> None:
    await message.answer("–ù–µ–∑–∞–±–∞—Ä–æ–º —Ç—É—Ç –±—É–¥–µ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–≤–æ—ó—Ö –≤–∏—Ç—Ä–∞—Ç –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤.")